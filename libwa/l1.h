#pragma once

#include "wa.h"
#include "buf.h"
#include "msg.h"
#include "dg.h"

/* TODO: mode this two enum into a better place */


enum metric {
	METRIC_DEBUG_LOG = 1,
	METRIC_QUERY_RESUME,
	METRIC_QUERY_RECEIPT,
	METRIC_QUERY_MEDIA,
	METRIC_QUERY_CHAT,		// 5
	METRIC_QUERY_CONTACTS,
	METRIC_QUERY_MESSAGES,
	METRIC_PRESENCE,
	METRIC_PRESENCE_SUBSCRIBE,
	METRIC_GROUP, 			//10
	METRIC_READ,
	METRIC_CHAT,
	METRIC_RECEIVED,
	METRIC_PIC,
	METRIC_STATUS,			//15
	METRIC_MESSAGE,
	METRIC_QUERY_ACTIONS,
	METRIC_BLOCK,
	METRIC_QUERY_GROUP,
	METRIC_QUERY_PREVIEW, 		//20
	METRIC_QUERY_EMOJI,
	METRIC_QUERY_MESSAGE_INFO,
	METRIC_SPAM,
	METRIC_QUERY_SEARCH,
	METRIC_QUERY_IDENTITY,		//25
	METRIC_QUERY_URL,
	METRIC_PROFILE,
	METRIC_CONTACT,
	METRIC_QUERY_VCARD,
	METRIC_QUERY_STATUS, 		//30
	METRIC_QUERY_STATUS_UPDATE,
	METRIC_PRIVACY_STATUS,
	METRIC_QUERY_LIVE_LOCATIONS,
	METRIC_LIVE_LOCATION,
	METRIC_QUERY_VNAME,		//35
	METRIC_QUERY_LABELS,
	METRIC_CALL,
	METRIC_QUERY_CALL,
	METRIC_QUERY_QUICK_REPLIES,
};

enum flag {
	FLAG_IGNORE		= 1<<7, // 128
	FLAG_ACK_REQUEST	= 1<<6, // 64
	FLAG_AVAILABLE		= 1<<5, // 32
	FLAG_NOT_AVAILABLE	= 1<<4, // 16
	FLAG_EXPIRES		= 1<<3, // 8
	FLAG_SKIP_OFFLINE	= 1<<2, // 4
};

int
l1_send(wa_t *wa, dg_t *dg);

int
l1_recv(wa_t *wa, dg_t *dg);

int
l1_recv_msg(wa_t *wa, msg_t *msg);

int
l1_presence_subscribe(wa_t *wa, char *jid);

int
l1_send_keep_alive(wa_t *wa);
